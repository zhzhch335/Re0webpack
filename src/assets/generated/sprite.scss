// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$i-linkapp-27-name: 'iLinkapp-27';
$i-linkapp-27-x: 0px;
$i-linkapp-27-y: 0px;
$i-linkapp-27-offset-x: 0px;
$i-linkapp-27-offset-y: 0px;
$i-linkapp-27-width: 16px;
$i-linkapp-27-height: 16px;
$i-linkapp-27-total-width: 48px;
$i-linkapp-27-total-height: 48px;
$i-linkapp-27-image: '~sprite.png';
$i-linkapp-27: (0px, 0px, 0px, 0px, 16px, 16px, 48px, 48px, '~sprite.png', 'iLinkapp-27', );
$i-linkapp-28-name: 'iLinkapp-28';
$i-linkapp-28-x: 16px;
$i-linkapp-28-y: 0px;
$i-linkapp-28-offset-x: -16px;
$i-linkapp-28-offset-y: 0px;
$i-linkapp-28-width: 16px;
$i-linkapp-28-height: 16px;
$i-linkapp-28-total-width: 48px;
$i-linkapp-28-total-height: 48px;
$i-linkapp-28-image: '~sprite.png';
$i-linkapp-28: (16px, 0px, -16px, 0px, 16px, 16px, 48px, 48px, '~sprite.png', 'iLinkapp-28', );
$i-linkapp-29-name: 'iLinkapp-29';
$i-linkapp-29-x: 0px;
$i-linkapp-29-y: 16px;
$i-linkapp-29-offset-x: 0px;
$i-linkapp-29-offset-y: -16px;
$i-linkapp-29-width: 16px;
$i-linkapp-29-height: 16px;
$i-linkapp-29-total-width: 48px;
$i-linkapp-29-total-height: 48px;
$i-linkapp-29-image: '~sprite.png';
$i-linkapp-29: (0px, 16px, 0px, -16px, 16px, 16px, 48px, 48px, '~sprite.png', 'iLinkapp-29', );
$i-linkapp-30-name: 'iLinkapp-30';
$i-linkapp-30-x: 16px;
$i-linkapp-30-y: 16px;
$i-linkapp-30-offset-x: -16px;
$i-linkapp-30-offset-y: -16px;
$i-linkapp-30-width: 16px;
$i-linkapp-30-height: 16px;
$i-linkapp-30-total-width: 48px;
$i-linkapp-30-total-height: 48px;
$i-linkapp-30-image: '~sprite.png';
$i-linkapp-30: (16px, 16px, -16px, -16px, 16px, 16px, 48px, 48px, '~sprite.png', 'iLinkapp-30', );
$i-linkapp-31-name: 'iLinkapp-31';
$i-linkapp-31-x: 32px;
$i-linkapp-31-y: 0px;
$i-linkapp-31-offset-x: -32px;
$i-linkapp-31-offset-y: 0px;
$i-linkapp-31-width: 16px;
$i-linkapp-31-height: 16px;
$i-linkapp-31-total-width: 48px;
$i-linkapp-31-total-height: 48px;
$i-linkapp-31-image: '~sprite.png';
$i-linkapp-31: (32px, 0px, -32px, 0px, 16px, 16px, 48px, 48px, '~sprite.png', 'iLinkapp-31', );
$i-linkapp-32-name: 'iLinkapp-32';
$i-linkapp-32-x: 32px;
$i-linkapp-32-y: 16px;
$i-linkapp-32-offset-x: -32px;
$i-linkapp-32-offset-y: -16px;
$i-linkapp-32-width: 16px;
$i-linkapp-32-height: 16px;
$i-linkapp-32-total-width: 48px;
$i-linkapp-32-total-height: 48px;
$i-linkapp-32-image: '~sprite.png';
$i-linkapp-32: (32px, 16px, -32px, -16px, 16px, 16px, 48px, 48px, '~sprite.png', 'iLinkapp-32', );
$test-1-name: 'test-1';
$test-1-x: 0px;
$test-1-y: 32px;
$test-1-offset-x: 0px;
$test-1-offset-y: -32px;
$test-1-width: 16px;
$test-1-height: 16px;
$test-1-total-width: 48px;
$test-1-total-height: 48px;
$test-1-image: '~sprite.png';
$test-1: (0px, 32px, 0px, -32px, 16px, 16px, 48px, 48px, '~sprite.png', 'test-1', );
$spritesheet-width: 48px;
$spritesheet-height: 48px;
$spritesheet-image: '~sprite.png';
$spritesheet-sprites: ($i-linkapp-27, $i-linkapp-28, $i-linkapp-29, $i-linkapp-30, $i-linkapp-31, $i-linkapp-32, $test-1, );
$spritesheet: (48px, 48px, '~sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
